name: ci

on:
  # run on all pushes to any branch
  push:
    paths:
      # Only run on changes to source or test python files build files
      - "alsa/**.py"
      - "tests/**.py"
      - "environment.yml"
      - "pyproject.toml"
      - ".github/workflows/ci.yaml"

jobs:
  conda-pytest:
    name: Test üêç code installed with conda
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest, ubuntu-latest]
        python-version: [3.8]
    runs-on: ${{ matrix.platform }}
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - uses: actions/checkout@v2
      - uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: alsa
          auto-activate-base: false
          channel-priority: true
          environment-file: environment.yml
          mamba-version: "*"
          python-version: ${{ matrix.python-version }}
      - name: Print installed conda environment on ${{ matrix.platform }}
        run: |
          conda info
          conda list
          python --version
      - name: Import test
        run: |
          python -c 'import alsa'
      - name: Run unit tests with pytest
        run: |
          pytest -v

  # Linting
  lint:
    name: Lint üêç code using pre-commit
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: pre-commit/action@v2.0.3

  # Test with poetry
  poetry-pytest:
    name: Test üêç code installed with poetry (pip)
    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      # - name: Install library
      #   run: poetry install --no-interaction
      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
      - name: Run tests
        run: |
          source .venv/bin/activate
          pytest
